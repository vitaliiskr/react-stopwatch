{"version":3,"sources":["logo.svg","Stopwatch/Stopwatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","useState","time","setTime","isTimeStarted","setIsTimeStarted","useEffect","stream$","Subject","interval","pipe","takeUntil","subscribe","prevTime","next","complete","className","Math","floor","slice","type","onClick","disabled","onDoubleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,I,oDCuGAA,EAlGG,WAAO,IAAD,EACEC,mBAAS,GADX,mBACfC,EADe,KACTC,EADS,OAEoBF,oBAAS,GAF7B,mBAEfG,EAFe,KAEAC,EAFA,KAItBC,qBAAU,WACR,IAAMC,EAAU,IAAIC,IAWpB,OAVAC,YAAS,KACNC,KACCC,YAAUJ,IAEXK,WAAU,WACLR,GACFD,GAAQ,SAACU,GAAD,OAAcA,EAAW,QAIhC,WACLN,EAAQO,OACRP,EAAQQ,cAET,CAACX,IAsBJ,OACE,sBAAKY,UAAU,YAAf,UACE,sBAAKA,UAAU,oBAAf,UAEE,qBAAKA,UAAU,kBAAf,SACG,WAAKC,KAAKC,MAAOhB,EAAO,KAAQ,MAAQiB,OAAO,KAElD,qBAAKH,UAAU,oBAAf,eAEA,qBAAKA,UAAU,kBAAf,SACG,WAAKC,KAAKC,MAAOhB,EAAO,GAAM,KAAOiB,OAAO,KAE/C,qBAAKH,UAAU,oBAAf,eAEA,qBAAKA,UAAU,kBAAf,SACG,WAAKC,KAAKC,MAAMhB,EAAO,KAAOiB,OAAO,QAK1C,sBAAKH,UAAU,qBAAf,UACE,wBACEI,KAAK,SACLJ,UAAU,oBACVK,QA5CM,WACZhB,GAAiB,IA4CXiB,SAAUlB,EAJZ,mBAQA,wBACEgB,KAAK,SACLJ,UAAU,oBACVO,cAhDK,WACXlB,GAAiB,IA4Cb,kBAOA,wBACEe,KAAK,SACLJ,UAAU,oBACVK,QA5CK,WACXhB,GAAiB,GACjBF,EAAQ,IAuCJ,kBAOA,wBACEiB,KAAK,SACLJ,UAAU,oBACVK,QA1DM,WACRnB,GAAQ,IACVC,EAAQ,GACRE,GAAiB,KAoDf,0BC7EOmB,MARf,WACE,OACE,sBAAKR,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,QCGSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.071229d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\nimport './Stopwatch.scss';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nconst Stopwatch = () => {\n  const [time, setTime] = useState(0);\n  const [isTimeStarted, setIsTimeStarted] = useState(false);\n\n  useEffect(() => {\n    const stream$ = new Subject();\n    interval(1000)\n      .pipe(\n        takeUntil(stream$)\n      )\n      .subscribe(() => {\n        if (isTimeStarted) {\n          setTime((prevTime) => prevTime + 1);\n        }\n      });\n\n    return () => {\n      stream$.next();\n      stream$.complete();\n    };\n  }, [isTimeStarted]);\n\n  const start = () => {\n    setIsTimeStarted(true);\n  };\n\n  const wait = () => {\n    setIsTimeStarted(false);\n  };\n\n  const reset = () => {\n    if (time >= 1) {\n      setTime(0);\n      setIsTimeStarted(true);\n    }\n  };\n\n  const stop = () => {\n    setIsTimeStarted(false);\n    setTime(0)\n  }\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"stopwatch__screen\">\n\n        <div className=\"stopwatch__item\">\n          {(`0${Math.floor((time / 3600) % 100)}`).slice(-2)}\n        </div>\n        <div className=\"stopwatch__border\">:</div>\n\n        <div className=\"stopwatch__item\">\n          {(`0${Math.floor((time / 60) % 60)}`).slice(-2)}\n        </div>\n        <div className=\"stopwatch__border\">:</div>\n\n        <div className=\"stopwatch__item\">\n          {(`0${Math.floor(time % 60)}`).slice(-2)}\n        </div>\n        \n      </div>\n\n      <div className=\"stopwatch__buttons\">\n        <button\n          type=\"button\"\n          className=\"stopwatch__button\"\n          onClick={start}\n          disabled={isTimeStarted}\n        >\n          Start\n        </button>\n        <button\n          type=\"button\"\n          className=\"stopwatch__button\"\n          onDoubleClick={wait}\n        >\n          Wait\n        </button>\n        <button\n          type=\"button\"\n          className=\"stopwatch__button\"\n          onClick={stop}\n        >\n          Stop\n        </button>\n        <button\n          type=\"button\"\n          className=\"stopwatch__button\"\n          onClick={reset}\n        >\n          Reset\n        </button>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Stopwatch;\n\n","import logo from './logo.svg';\nimport './App.scss';\n\nimport Stopwatch from './Stopwatch/Stopwatch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Stopwatch</h2>\n      <Stopwatch />\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}